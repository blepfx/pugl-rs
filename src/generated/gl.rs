use crate::*;
/* automatically generated by rust-bindgen 0.71.1 */

#[doc = "OpenGL extension function."]
pub type PuglGlFunc = ::std::option::Option<unsafe extern "C" fn()>;
unsafe extern "C" {
    #[doc = "Return the address of an OpenGL extension function."]
    pub fn puglGetProcAddress(name: *const ::std::os::raw::c_char) -> PuglGlFunc;
}
unsafe extern "C" {
    #[doc = "Enter the OpenGL context.\n\nThis can be used to enter the graphics context in unusual situations, for\ndoing things like loading textures.  Note that this must not be used for\ndrawing, which may only be done while processing an expose event."]
    pub fn puglEnterContext(view: *mut PuglView) -> PuglStatus;
}
unsafe extern "C" {
    #[doc = "Leave the OpenGL context.\n\nThis must only be called after puglEnterContext()."]
    pub fn puglLeaveContext(view: *mut PuglView) -> PuglStatus;
}
unsafe extern "C" {
    #[doc = "OpenGL graphics backend.\n\nPass the returned value to puglSetBackend() to draw to a view with OpenGL."]
    pub fn puglGlBackend() -> *const PuglBackend;
}
